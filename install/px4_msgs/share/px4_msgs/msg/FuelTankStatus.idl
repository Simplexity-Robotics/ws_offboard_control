// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/FuelTankStatus.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module FuelTankStatus_Constants {
      const uint8 MAV_FUEL_TYPE_UNKNOWN = 0;
      const uint8 MAV_FUEL_TYPE_LIQUID = 1;
      const uint8 MAV_FUEL_TYPE_GAS = 2;
    };
    struct FuelTankStatus {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " maximum fuel capacity. Must always be provided, either from the driver or a parameter")
      float maximum_fuel_capacity;

      @verbatim (language="comment", text=
        " consumed fuel, NaN if not measured. Should not be inferred from the max fuel capacity")
      float consumed_fuel;

      @verbatim (language="comment", text=
        " fuel consumption rate, NaN if not measured")
      float fuel_consumption_rate;

      @verbatim (language="comment", text=
        " percentage of remaining fuel, UINT8_MAX if not provided")
      uint8 percent_remaining;

      @verbatim (language="comment", text=
        " remaining fuel, NaN if not measured. Should not be inferred from the max fuel capacity")
      float remaining_fuel;

      @verbatim (language="comment", text=
        " identifier for the fuel tank. Must match ID of other messages for same fuel system. 0 by default when only a single tank exists")
      uint8 fuel_tank_id;

      @verbatim (language="comment", text=
        " type of fuel based on MAV_FUEL_TYPE enum. Set to MAV_FUEL_TYPE_UNKNOWN if unknown or it does not fit the provided types")
      uint32 fuel_type;

      @verbatim (language="comment", text=
        " fuel temperature in Kelvin, NaN if not measured")
      float temperature;
    };
  };
};
